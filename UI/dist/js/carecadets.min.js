
/// <reference path="../../typings/tsd.d.ts" />
define('common/identity.service',["require", "exports"], function (require, exports) {
    var IdentityService = (function () {
        function IdentityService() {
        }
        IdentityService.prototype.setUser = function (user) {
            this.user = user;
        };
        IdentityService.prototype.getUser = function () {
            return this.user;
        };
        IdentityService.prototype.isAuthenticated = function () {
            return this.user !== undefined;
        };
        return IdentityService;
    })();
    return IdentityService;
});

define('common/localStorage.service',["require", "exports"], function (require, exports) {
    var LocalStorageService = (function () {
        function LocalStorageService() {
        }
        LocalStorageService.prototype.getValue = function (key) {
            if (typeof (Storage) !== 'undefined') {
                var jsonString = localStorage.getItem('carecadets.' + key);
                return JSON.parse(jsonString);
            }
            else {
                return '';
            }
        };
        ;
        LocalStorageService.prototype.setValue = function (key, value) {
            if (typeof (Storage) !== 'undefined') {
                var stringified = JSON.stringify(value);
                localStorage.setItem('carecadets.' + key, stringified);
            }
        };
        ;
        return LocalStorageService;
    })();
    return LocalStorageService;
});

/// <reference path="../../typings/tsd.d.ts" />
define('common/global.module',["require", "exports"], function (require, exports) {
    var Global;
    (function (Global) {
        Global.DefaultErrorMessage = 'Sorry, there has been an error accessing the server.';
    })(Global || (Global = {}));
    return Global;
});

/// <reference path="../../typings/tsd.d.ts" />
/// <amd-dependency path="common/global.module" />
/// <amd-dependency path="common/identity.service" />
define('common/lazyLoading.module',["require", "exports", 'common/identity.service', 'common/localStorage.service', "common/global.module", "common/identity.service"], function (require, exports, IdentityService, LocalStorageService) {
    var LazyLoading;
    (function (LazyLoading) {
        var Application = (function () {
            function Application() {
            }
            Application.initializeAngular = function (routes) {
                Application.app = angular.module('app', ['ngRoute', 'ngCookies']);
                Application.config(routes);
            };
            /* this method is public for testing purposes only */
            Application.assignRegistrationMethods = function ($controllerProvider, $provide, $compileProvider) {
                Application.app.registerController = $controllerProvider.register;
                Application.app.registerService = $provide.service;
                Application.app.registerDirective = $compileProvider.directive;
            };
            /* this method is public for testing purposes only */
            Application.config = function (routes) {
                Application.app.config(['$routeProvider', '$controllerProvider', '$provide', '$compileProvider', '$httpProvider', function ($routeProvider, $controllerProvider, $provide, $compileProvider, $httpProvider) {
                        Application.assignRegistrationMethods($controllerProvider, $provide, $compileProvider);
                        routes.forEach(function (route) {
                            $routeProvider
                                .when(route.url, {
                                templateUrl: route.template,
                                settings: {
                                    secure: route.secure
                                },
                                resolve: {
                                    load: ['$q', function ($q) {
                                            var defered = $q.defer();
                                            require([route.controller], function () {
                                                defered.resolve();
                                            });
                                            return defered.promise;
                                        }]
                                }
                            });
                        });
                        // Initial services				
                        if (Application.app.registerService) {
                            Application.app.registerService('IdentityService', IdentityService);
                            Application.app.registerService('LocalStorageService', LocalStorageService);
                        }
                    }])
                    .run(['$rootScope', '$location', 'IdentityService', 'LocalStorageService', function ($rootScope, $location, identityService, localStorageService) {
                        $rootScope.$on('$routeChangeStart', function (event, next) {
                            if (next && next.$$route && next.$$route.settings && next.$$route.settings.secure && !identityService.isAuthenticated()) {
                                event.preventDefault();
                                $rootScope.$evalAsync(function () {
                                    if ($location.url() !== '') {
                                        localStorageService.setValue('referrer', $location.url());
                                    }
                                    $location.path('/login');
                                });
                                return;
                            }
                        });
                    }]);
            };
            Application.registerController = function (name, controller) {
                if (Application.app && Application.app.registerController) {
                    Application.app.registerController(name, controller);
                }
            };
            Application.registerService = function (name, service) {
                if (Application.app && Application.app.registerService) {
                    Application.app.registerService(name, service);
                }
            };
            Application.registerDirective = function (name, service) {
                if (Application.app && Application.app.registerDirective) {
                    Application.app.registerDirective(name, service);
                }
            };
            return Application;
        })();
        LazyLoading.Application = Application;
    })(LazyLoading || (LazyLoading = {}));
    return LazyLoading;
});

/// <reference path="../typings/tsd.d.ts" />
/// <amd-dependency path="common/lazyLoading.module" />
define('app',["require", "exports", 'common/lazyLoading.module', "common/lazyLoading.module"], function (require, exports, LazyLoading) {
    var Routes = [
        { url: '/', template: 'app/homepage/homepage.html', controller: 'homepage/homepage.controller', secure: false },
        { url: '/login', template: 'app/homepage/homepage.html', controller: 'homepage/homepage.controller', secure: false },
        { url: '/registration', template: 'app/registration/registration.html', controller: 'registration/registration.controller', secure: false },
        { url: '/room', template: 'app/room/room.html', controller: 'room/room.controller', secure: false },
        { url: '/thanks', template: 'app/thanks/thanks.html', controller: 'thanks/thanks.controller', secure: false },
    ];
    LazyLoading.Application.initializeAngular(Routes);
});

/// <reference path="../typings/tsd.d.ts" />
require.config({
    paths: {
        'app': 'app'
    },
    shim: {
        'app': {
            deps: []
        }
    },
    deps: [],
    callback: null,
    baseUrl: '/dist/js',
    urlArgs: 'v=1.0'
});
require(['app'], function () {
    angular.bootstrap(document, ['app']);
});
// Force dependencies for the optimize gulp step
require([]);

define("main", function(){});
